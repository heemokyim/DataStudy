> db.item.updateMany({price: {$eq:25000}}, {$inc: {price: 5000}});
{ "acknowledged" : true, "matchedCount" : 4, "modifiedCount" : 4 }
> db.item.updateMany({price: {$eq:30000}}, {$mul: {price: 0.5}});
{ "acknowledged" : true, "matchedCount" : 4, "modifiedCount" : 4 }
> db.item.find({},{_id:false, name:true, price:true});
{ "name" : "item 1", "price" : 10000 }
{ "name" : "item 2", "price" : 15000 }
{ "name" : "item 6" }
{ "name" : "item 4", "price" : 15000 }
{ "name" : "item 5", "price" : 15000 }
{ "name" : "item 3", "price" : 15000 }
> db.item.update({name: "item 1"}, {$rename: {price: 20000}});
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 0,
        "nModified" : 0,
        "writeError" : {
                "code" : 2,
                "errmsg" : "The 'to' field for $rename must be a string: price: 20000.0"
        }
})
> db.item.updateOne({name: "item 1"}, {$rename: {price: 20000}});
2018-07-11T15:22:03.839+0900 E QUERY    [js] WriteError: The 'to' field for $rename must be a string: price: 20000.0 :
WriteError({
        "index" : 0,
        "code" : 2,
        "errmsg" : "The 'to' field for $rename must be a string: price: 20000.0",
        "op" : {
                "q" : {
                        "name" : "item 1"
                },
                "u" : {
                        "$rename" : {
                                "price" : 20000
                        }
                },
                "multi" : false,
                "upsert" : false
        }
})
WriteError@src/mongo/shell/bulk_api.js:461:48
Bulk/mergeBatchResults@src/mongo/shell/bulk_api.js:841:49
Bulk/executeBatch@src/mongo/shell/bulk_api.js:906:13
Bulk/this.execute@src/mongo/shell/bulk_api.js:1150:21
DBCollection.prototype.updateOne@src/mongo/shell/crud_api.js:572:17
@(shell):1:1
> db.item.updateOne({name:"item 1"}, {$rename: {price: 20000}});
2018-07-11T15:23:01.157+0900 E QUERY    [js] WriteError: The 'to' field for $rename must be a string: price: 20000.0 :
WriteError({
        "index" : 0,
        "code" : 2,
        "errmsg" : "The 'to' field for $rename must be a string: price: 20000.0",
        "op" : {
                "q" : {
                        "name" : "item 1"
                },
                "u" : {
                        "$rename" : {
                                "price" : 20000
                        }
                },
                "multi" : false,
                "upsert" : false
        }
})
WriteError@src/mongo/shell/bulk_api.js:461:48
Bulk/mergeBatchResults@src/mongo/shell/bulk_api.js:841:49
Bulk/executeBatch@src/mongo/shell/bulk_api.js:906:13
Bulk/this.execute@src/mongo/shell/bulk_api.js:1150:21
DBCollection.prototype.updateOne@src/mongo/shell/crud_api.js:572:17
@(shell):1:1
> db.item.update({name:"item 1"}, {$rename: {price: 20000}});
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 0,
        "nModified" : 0,
        "writeError" : {
                "code" : 2,
                "errmsg" : "The 'to' field for $rename must be a string: price: 20000.0"
        }
})
> db.testlist.insertMany(
... {_id : 1, list=[1,2,3,4]},
... {_id : 2, list=["a", "b", "c", "d"]}^C

> db.testlist.insertMany(
... {_id : 1, list : [1,2,3,4]},
... {_id : 2, list : ["a","b","c","d"]},
... {_id : 3, doc : [{name: "A", price: 100}, {name: "B", price: 200}]});
2018-07-11T15:28:30.534+0900 E QUERY    [js] TypeError: documents.map is not a function :
DBCollection.prototype.insertMany@src/mongo/shell/crud_api.js:295:1
@(shell):1:1
> db.testlist.insertMany([{_id : 1, list : [1,2,3,4]}, {_id : 2, list : ["a","b","c","d"]}, {_id : 3, doc : [{name: "A", price: 100}, {name: "B", price: 200}]}]);
{ "acknowledged" : true, "insertedIds" : [ 1, 2, 3 ] }
> db.testlist.find()
{ "_id" : 1, "list" : [ 1, 2, 3, 4 ] }
{ "_id" : 2, "list" : [ "a", "b", "c", "d" ] }
{ "_id" : 3, "doc" : [ { "name" : "A", "price" : 100 }, { "name" : "B", "price" : 200 } ] }
> db.testlist.find({list: 2});
{ "_id" : 1, "list" : [ 1, 2, 3, 4 ] }
> db.testlist.find({list: 10});
> db.testlist.find({list: "a"});
{ "_id" : 2, "list" : [ "a", "b", "c", "d" ] }
> db.testlist.find({doc: "A"});
> db.testlist.find({doc.name: "A"});
2018-07-11T15:34:49.386+0900 E QUERY    [js] SyntaxError: missing : after property id @(shell):1:21
> db.testlist.find();
{ "_id" : 1, "list" : [ 1, 2, 3, 4 ] }
{ "_id" : 2, "list" : [ "a", "b", "c", "d" ] }
{ "_id" : 3, "doc" : [ { "name" : "A", "price" : 100 }, { "name" : "B", "price" : 200 } ] }
> db.testlist.updateOne({_id: 1}, {list: [10);
... db.testlist.find();^C

> db.testlist.updateOne({_id: 1}, {list : 10});
2018-07-11T15:38:36.846+0900 E QUERY    [js] Error: the update operation document must contain atomic operators :
DBCollection.prototype.updateOne@src/mongo/shell/crud_api.js:542:1
@(shell):1:1
> db.testlist.updateOne({_id: 1}, {$pull: {list : 3}});
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.testlist.find();
{ "_id" : 1, "list" : [ 1, 2, 4 ] }
{ "_id" : 2, "list" : [ "a", "b", "c", "d" ] }
{ "_id" : 3, "doc" : [ { "name" : "A", "price" : 100 }, { "name" : "B", "price" : 200 } ] }
> db.testlist.updateOne({_id: 2}, {$push : {list:3}});
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.testlist.find();
{ "_id" : 1, "list" : [ 1, 2, 4 ] }
{ "_id" : 2, "list" : [ "a", "b", "c", "d", 3 ] }
{ "_id" : 3, "doc" : [ { "name" : "A", "price" : 100 }, { "name" : "B", "price" : 200 } ] }
> db.testlist.update({list: "c"}, {list.$: "C"});
2018-07-11T15:45:12.951+0900 E QUERY    [js] SyntaxError: missing : after property id @(shell):1:37
> db.item.find()
{ "_id" : ObjectId("5b458bbd637ce3c909f010c2"), "name" : "item 1", "price" : 10000 }
{ "_id" : ObjectId("5b458bbd637ce3c909f010c3"), "name" : "item 2", "price" : 15000 }
{ "_id" : ObjectId("5b458bbd637ce3c909f010c4"), "name" : "item 6" }
{ "_id" : ObjectId("5b458bbd637ce3c909f010c5"), "name" : "item 4", "price" : 15000 }
{ "_id" : ObjectId("5b458bbd637ce3c909f010c6"), "name" : "item 5", "price" : 15000 }
{ "_id" : ObjectId("5b459f262ae97cfdde5fddab"), "name" : "item 3", "price" : 15000 }
> db.item.remove({name: "item 1"});
WriteResult({ "nRemoved" : 1 })
> db.item.find()
{ "_id" : ObjectId("5b458bbd637ce3c909f010c3"), "name" : "item 2", "price" : 15000 }
{ "_id" : ObjectId("5b458bbd637ce3c909f010c4"), "name" : "item 6" }
{ "_id" : ObjectId("5b458bbd637ce3c909f010c5"), "name" : "item 4", "price" : 15000 }
{ "_id" : ObjectId("5b458bbd637ce3c909f010c6"), "name" : "item 5", "price" : 15000 }
{ "_id" : ObjectId("5b459f262ae97cfdde5fddab"), "name" : "item 3", "price" : 15000 }
> db.item.remove({name: /item [2-4]/});
WriteResult({ "nRemoved" : 3 })
> db.item.find()
{ "_id" : ObjectId("5b458bbd637ce3c909f010c4"), "name" : "item 6" }
{ "_id" : ObjectId("5b458bbd637ce3c909f010c6"), "name" : "item 5", "price" : 15000 }
> db.item.drop({});
true
> db.item.find()
> add_item = function() {
... for ( count = 0; count < 10000; count++) {
... db.item.insertOne({name: "item" + count, price = NumberInt(Math.random() * 50000)})};
...
...
> add_item = function(){
... for (count = 0; count < 10000; count++){
... db.item.insertOne({name: "item" + count, price: NumberInt(Math.random() * 50000)})};
...
...
>
> add_item = function() {
... for (count = 0; count < 10000; count++ ){
... db.item.insertOne({name: "item" + count , price : NumberInt(Math.random() * 50000)})}};
function () {
for (count = 0; count < 10000; count++ ){
db.item.insertOne({name: "item" + count , price : NumberInt(Math.random() * 50000)})}}
> add_item.count()
2018-07-11T15:57:43.520+0900 E QUERY    [js] TypeError: add_item.count is not a function :
@(shell):1:1
> db.item.count()
0
> db.item.add_item()
2018-07-11T16:00:08.307+0900 E QUERY    [js] TypeError: db.item.add_item is not a function :
@(shell):1:1
> add_item()
> db.item.count()
10000
> db.item.getIndex
admin.item.getIndex
> db.item.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "admin.item"
        }
]
> db.item.createIndex({price: -1});
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
> db,uten,getIndexes();
2018-07-11T16:02:51.342+0900 E QUERY    [js] ReferenceError: uten is not defined :
@(shell):1:4
> db,item,getIndexes();
2018-07-11T16:02:59.825+0900 E QUERY    [js] ReferenceError: item is not defined :
@(shell):1:4
> db.item.getIndexes();
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "admin.item"
        },
        {
                "v" : 2,
                "key" : {
                        "price" : -1
                },
                "name" : "price_-1",
                "ns" : "admin.item"
        }
]
> db.item.find({$gte: {price: 48000}});
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $gte",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.item.find({price: {$gte: 48000}});
{ "_id" : ObjectId("5b45ab09637ce3c909f0299c"), "name" : "item6357", "price" : 49998 }
{ "_id" : ObjectId("5b45ab0a637ce3c909f02dfa"), "name" : "item7475", "price" : 49990 }
{ "_id" : ObjectId("5b45ab09637ce3c909f02937"), "name" : "item6256", "price" : 49989 }
{ "_id" : ObjectId("5b45ab09637ce3c909f027b5"), "name" : "item5870", "price" : 49981 }
{ "_id" : ObjectId("5b45ab08637ce3c909f01dc3"), "name" : "item3324", "price" : 49979 }
{ "_id" : ObjectId("5b45ab07637ce3c909f01ad7"), "name" : "item2576", "price" : 49978 }
{ "_id" : ObjectId("5b45ab08637ce3c909f02303"), "name" : "item4668", "price" : 49975 }
{ "_id" : ObjectId("5b45ab08637ce3c909f01e48"), "name" : "item3457", "price" : 49969 }
{ "_id" : ObjectId("5b45ab06637ce3c909f011bc"), "name" : "item245", "price" : 49950 }
{ "_id" : ObjectId("5b45ab07637ce3c909f016ee"), "name" : "item1575", "price" : 49930 }
{ "_id" : ObjectId("5b45ab0a637ce3c909f03168"), "name" : "item8353", "price" : 49928 }
{ "_id" : ObjectId("5b45ab07637ce3c909f01674"), "name" : "item1453", "price" : 49925 }
{ "_id" : ObjectId("5b45ab0a637ce3c909f02c91"), "name" : "item7114", "price" : 49923 }
{ "_id" : ObjectId("5b45ab08637ce3c909f02427"), "name" : "item4960", "price" : 49920 }
{ "_id" : ObjectId("5b45ab09637ce3c909f0256a"), "name" : "item5283", "price" : 49919 }
{ "_id" : ObjectId("5b45ab08637ce3c909f0214a"), "name" : "item4227", "price" : 49913 }
{ "_id" : ObjectId("5b45ab09637ce3c909f02a2a"), "name" : "item6499", "price" : 49898 }
{ "_id" : ObjectId("5b45ab09637ce3c909f0254a"), "name" : "item5251", "price" : 49868 }
{ "_id" : ObjectId("5b45ab09637ce3c909f028a0"), "name" : "item6105", "price" : 49865 }
{ "_id" : ObjectId("5b45ab0a637ce3c909f03342"), "name" : "item8827", "price" : 49863 }
Type "it" for more
> db.item.dropIndex({price: -1});
{ "nIndexesWas" : 2, "ok" : 1 }
> db.item.getIndexes();
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "admin.item"
        }
]
> db.item.find({price: {$gte: 48000}});
{ "_id" : ObjectId("5b45ab06637ce3c909f010e3"), "name" : "item28", "price" : 48537 }
{ "_id" : ObjectId("5b45ab06637ce3c909f010f1"), "name" : "item42", "price" : 49268 }
{ "_id" : ObjectId("5b45ab06637ce3c909f010f4"), "name" : "item45", "price" : 49224 }
{ "_id" : ObjectId("5b45ab06637ce3c909f010f7"), "name" : "item48", "price" : 49312 }
{ "_id" : ObjectId("5b45ab06637ce3c909f01127"), "name" : "item96", "price" : 48941 }
{ "_id" : ObjectId("5b45ab06637ce3c909f0112e"), "name" : "item103", "price" : 48644 }
{ "_id" : ObjectId("5b45ab06637ce3c909f01163"), "name" : "item156", "price" : 49288 }
{ "_id" : ObjectId("5b45ab06637ce3c909f0116e"), "name" : "item167", "price" : 49378 }
{ "_id" : ObjectId("5b45ab06637ce3c909f01188"), "name" : "item193", "price" : 48468 }
{ "_id" : ObjectId("5b45ab06637ce3c909f01194"), "name" : "item205", "price" : 48626 }
{ "_id" : ObjectId("5b45ab06637ce3c909f011ab"), "name" : "item228", "price" : 48649 }
{ "_id" : ObjectId("5b45ab06637ce3c909f011b8"), "name" : "item241", "price" : 48734 }
{ "_id" : ObjectId("5b45ab06637ce3c909f011bc"), "name" : "item245", "price" : 49950 }
{ "_id" : ObjectId("5b45ab06637ce3c909f011ca"), "name" : "item259", "price" : 49057 }
{ "_id" : ObjectId("5b45ab06637ce3c909f0121b"), "name" : "item340", "price" : 49604 }
{ "_id" : ObjectId("5b45ab06637ce3c909f01233"), "name" : "item364", "price" : 49110 }
{ "_id" : ObjectId("5b45ab06637ce3c909f0124c"), "name" : "item389", "price" : 49582 }
{ "_id" : ObjectId("5b45ab06637ce3c909f01254"), "name" : "item397", "price" : 49421 }
{ "_id" : ObjectId("5b45ab06637ce3c909f01255"), "name" : "item398", "price" : 48299 }
{ "_id" : ObjectId("5b45ab06637ce3c909f0127b"), "name" : "item436", "price" : 48872 }
Type "it" for more
> db.item.totalIndexSize();
98304
>